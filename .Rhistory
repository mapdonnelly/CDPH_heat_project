repro.first.mean
rcp
repro.first.mean<-apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x>0)>0, (mean(x[x>0],na.rm=TRUE)),0)})
repro.first.mean
X <- array(rnorm(90, mean =-1, sd=7), c(3,3,20), list(c("day", "x", "y")))
X<-round(X,digits = 0)
X
rcp<-X
rcp
X <- array(rnorm(90, mean =1, sd=7), c(3,3,20), list(c("day", "x", "y")))
X<-round(X,digits = 0)
X
rcp<-X
rcp
a<-1
b<-3
repro.mean.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){mean(x)}) #mean of repro.rates
###won't work unless array has at least 14 layers
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which(x>0)[14],NA)})
rcp
repro.14th.85.21
X <- array(rnorm(90, mean =5, sd=7), c(3,3,20), list(c("day", "x", "y")))
X<-round(X,digits = 0)
X
rcp<-X
rcp
a<-1
b<-3
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which(x>0)[14],NA)})
rcp
repro.14th.85.21
X <- array(rnorm(90, mean =9, sd=7), c(3,3,20), list(c("day", "x", "y")))
X<-round(X,digits = 0)
X
rcp<-X
rcp
a<-1
b<-3
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which(x>0)[14],NA)})
rcp
repro.14th.85.21
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which(x>0)[14],NA)})
rcp
repro.14th.85.21
rcp
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,x[14](which(x>0)),NA)})
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,x[x>0][14],NA)})
rcp
repro.14th.85.21
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which(x>0)[14],NA)})
rcp
repro.14th.85.21
X <- array(rnorm(200, mean =-.15, sd=.07), c(3,3,365))
rcp<-X
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which(x>0)[14],NA)})
rcp
repro.14th.85.21
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,x(which(x>0)[14]),NA)})
rcp
repro.14th.85.21
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,x[14](which(x>0)),NA)})
rcp
repro.14th.85.21
X <- array(rnorm(200, mean =0, sd=5), c(3,3,365))
##list(c("day", "x", "y"))
#X<-round(X,digits = 0)
X
summary(X)
rcp<-X
rcp
a<-1
b<-365
repro.14th.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which(x>0)[14],NA)})
rcp
repro.14th.85.21
rcp
rcp[,,1:25]
repro.14th.85.21
rcp[,,1:25]
repro.last.85.21 = apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,max(which(x>0)),NA)}) ##selects last day
rcp
repro.last.85.21
repro.max.day.85.21= apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which.max(x),NA)})
rcp
repro.max.day.85.21
X <- array(rnorm(90, mean =9, sd=7), c(3,3,20), list(c("day", "x", "y")))
X<-round(X,digits = 0)
X
rcp<-X
rcp
a<-1
b<-20
repro.max.day.85.21= apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which.max(x),NA)})
rcp
repro.max.day.85.21
repro.max.rate.85.21= apply(rcp[,,a:b],1:2, FUN=function(x){max(x)})
rcp
repro.max.rate.85.21
X <- array(rnorm(200, mean =0, sd=5), c(3,3,365))
##list(c("day", "x", "y"))
#X<-round(X,digits = 0)
X
summary(X)
rcp<-X
rcp
a<-1
b<-365
repro.mean.jan.rr.85.21=apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[1:31]>0)>0,(mean(x[1:31][x[1:31]>0])),0)})
#rcp
repro.mean.jan.rr.85.21
repro.max.day.85.21= apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which.max(x),NA)})
rcp
repro.max.day.85.21
repro.max.day.85.21= apply(rcp[,,a:b],1:2,FUN=function(x){which.max(x)})
rcp
repro.max.day.85.21
repro.max.day.85.21= apply(rcp[,,a:b],1:2,FUN=function(x){ifelse(sum(x>0)>0,which.max(x),NA)})
repro.max.day.85.21
repro.max.day.85.21= apply(rcp[,,a:b],1:2,FUN=function(x){which.max(x)})
repro.max.day.85.21
repro.mean.july.rr=apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[183:213]>0)>0,(mean(x[183:213][x[183:213]>0])),0)})
#rcp
repro.mean.july.rr
x[214:244]
X[214:244]
repro.mean.summer.rr= apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[182:273]>0)>0,(mean(x[214:244][x[214:244]>0])),0)})
repro.mean.summer.rr
repro.mean.winter.rr= apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[c(1:59, 335:365)]>0)>0,(mean(x[c(1:59, 335:365)[x[c(1:59, 335:365)>0])),0)})
rcp[1:59,335:365]
rcp[1]
rcp
rcp[1:3]
rcp[cbind(1:59,335:365)]
rcp[1:59 & 335:365]
rcp[1:3]
rcp[c(1:59,335:365)]
repro.mean.winter.rr= apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[c(1:59,335:365)]>0)>0,(mean(x[c(1:59,335:365)[x[c(1:59,335:365)>0])),0)})
repro.mean.winter.rr= apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[c(1:59,335:365)]>0)>0,(mean(x[c(1:59,335:365)[x[c(1:59,335:365)>0]),0)})
repro.mean.winter.rr= apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[c(1:59,335:365)]>0)>0,(mean(x[c(1:59,335:365)][x[c(1:59,335:365)]>0]),0)})
repro.mean.winter.rr= apply(rcp[,,a:b],1:2, FUN=function(x){ifelse(sum(x[c(1:59,335:365)]>0)>0,(mean(x[c(1:59,335:365)][x[c(1:59,335:365)]>0])),0)})
repro.mean.winter.rr
X <- array(rnorm(90, mean =9, sd=7), c(3,3,20), list(c("day", "x", "y")))
X<-round(X,digits = 0)
X
rcp<-X
rcp
rcp[[c(1:2,4:6)]]
rcp[[,,c(1:2,4:6)]]
rcp[,,c(1:2,4:6)]
rcp[,,c(1:2,5:7)]
rcp
searh(pi)
search(pi)
search('pi')
pi
parent.env(globalenv())
parent.evn(parent.env(globalenv()))
parent.env(parent.env(globalenv()))
search() ##Where we find variables in functions, and in different packages
find("pi")
parent.env(parent.env(globalenv())) ##identify the parent environments
XML::xmlParse()
XML::xmlParse
library(ReadPDF, pos = 10)
install.packages("ReadPDF")
library(ReadPDF, pos = 10)
e = parse(text= "1+2")
class(e)
e[[1]]
class(e[[1]])
class(e)
e
e[[1]][[1]]
+
'+'
'+'
`+`
e= parse(text = "1:10")
e[[1]]
e = parse(text= "1+2") ##when you use text, elements are treated as if they were lines of a file. Parses starts in the global environment
## and looks for '+'.
class(e) ##an expression
e[[1]]
class(e[[1]]) ##a call, everything that isn't literal, or a symbol, is a function call.
e[[1]][[1]]
e[[1]][[1]]
e= parse(text = "T; TRUE")
e[[1]]
e[[2]]
sapply(e, class)
e= parse(text = "'T';T; TRUE")
e[[1]]
e[[2]]
sapply(e, class)
ls(all=TRUE)
ls?
? ls()
?ls()
scatter.smooth(mtcars[, c("mpg","wgt")],,,,
"gaussian","Weight of cars", "Miles per gallon",
lbars = list (lwd= 2, col="red"),
main="Motor Trends Data")
scatter.smooth(mtcars[, c("mpg","wt")],,,,
"gaussian","Weight of cars", "Miles per gallon",
lbars = list (lwd= 2, col="red"),
main="Motor Trends Data")
scatter.smooth
formals(scatter.smooth)
lbars = list(lwd= 2, col="red"),
scatter.smooth(mtcars[, c("mpg","wt")],,,,
"gaussian","Weight of cars", "Miles per gallon",
lbars = list(lwd= 2, col="red"),
main="Motor Trends Data")
lpars = list(lwd= 2, col="red"),
scatter.smooth(mtcars[, c("mpg","wt")],,,,
"gaussian","Weight of cars", "Miles per gallon",
lpars = list(lwd= 2, col="red"),
main="Motor Trends Data")
## You can match up parameters with match.call
match.call(scatter.smooth(mtcars[, c("mpg","wt")],,,,
"gaussian","Weight of cars", "Miles per gallon",
lpars = list(lwd= 2, col="red"),
main="Motor Trends Data"))
match.call(scatter.smooth,quote(scatter.smooth(mtcars[, c("mpg","wt")],,,,
"gaussian","Weight of cars", "Miles per gallon",
lpars = list(lwd= 2, col="red"),
main="Motor Trends Data")))
scatter.smooth
sum(1,2, na.r=TRUE)
`[]`
`[`
?`[`
scatter.smooth
parent.env(parent.env(globalenv())) ##identify the parent environments
parent.env(globalenv())
parent.env(parent.env(globalenv()))
debug(xy.coords)
par(mfrow=c(1,2))
####Magori function
surv.skeeter = function(tmin,tmax,lifestage){
######Convert this to a function of minimum and maximum tmean###
###using r_tmax and r_tmin
##from skeeter buster
if (substring(lifestage,1,1) == 'e') {T0 = -14; T1 = -6; T2 = 30; T3 = 48; surv.nominal = .99} #T3 originally 47
if (substring(lifestage,1,1) == 'i') {T0 = 5; T1 = 10; T2 = 39; T3 = 48; surv.nominal = .99} # T3 originally 44
if (substring(lifestage,1,1) == 'a') {T0 = 0; T1 = 4; T2 = 40; T3 = 55; surv.nominal = .82} # for females # 0,4,40,50,.89 in paper
Stmin = ifelse(tmin<=T0, 0.05,  ifelse(T0<tmin & tmin<T1,0.05+0.95*(tmin-T0)/(T1-T0), 1.0))
Stmax = ifelse(tmax>=T3, 0.05,  ifelse(T2<tmax & tmax<T3,1 - 0.95*(tmax-T2)/(T3-T2) , 1.0))
St <- Stmin*Stmax
egg.surv.daily <- surv.nominal*St
return(egg.surv.daily)
}
tmin<-seq(-20,30,1)
tmax<-seq(0,50,1)
d1<- expand.grid(x=tmin, y=tmax)
colnames(d1)<-c("tmin", "tmax")
d1
d1$surv.egg<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "egg")
#install.packages("lattice")
library(lattice)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Magori")
d1$surv.adult<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "adult")
adult.surv<-levelplot(surv.adult~tmin*tmax, data=d1, main="Adult survival Magori")
#install.packages("gridExtra")
require(gridExtra) # also loads grid
grid.arrange(egg.surv,adult.surv, ncol=2)
###Mordecai fit for adult survival
###adult survival	from mordecai
par(mfrow=c(1,1))
d1$avg_temp<-(d1$tmin+d1$tmax)/2
surv.skeeter = function(tmin,tmax,lifestage){
######Convert this to a function of minimum and maximum tmean###
###using r_tmax and r_tmin
##from skeeter buster
if (substring(lifestage,1,1) == 'e') {T0 = -14; T1 = -6; T2 = 33; T3 = 48; surv.nominal = .99} #T3 originally 47
if (substring(lifestage,1,1) == 'i') {T0 = 5; T1 = 10; T2 = 39; T3 = 48; surv.nominal = .99} # T3 originally 44
if (substring(lifestage,1,1) == 'a') {T0 = 0; T1 = 4; T2 = 40; T3 = 55; surv.nominal = .82} # for females # 0,4,40,50,.89 in paper
Stmin = ifelse(tmin<=T0, 0.05,  ifelse(T0<tmin & tmin<T1,0.05+0.95*(tmin-T0)/(T1-T0), 1.0))
Stmax = ifelse(tmax>=T3, 0.05,  ifelse(T2<tmax & tmax<T3,1 - 0.95*(tmax-T2)/(T3-T2) , 1.0))
St <- Stmin*Stmax
egg.surv.daily <- surv.nominal*St
return(egg.surv.daily)
}
tmin<-seq(-20,30,1)
tmax<-seq(0,50,1)
d1<- expand.grid(x=tmin, y=tmax)
colnames(d1)<-c("tmin", "tmax")
d1
d1$surv.egg<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "egg")
#install.packages("lattice")
library(lattice)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Jay")
d1$surv.adult<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "adult")
adult.surv<-levelplot(surv.adult~tmin*tmax, data=d1, main="Adult survival Magori")
#install.packages("gridExtra")
require(gridExtra) # also loads grid
grid.arrange(egg.surv,adult.surv, ncol=2)
tmax<-seq(-20,50,1)
d1<- expand.grid(x=tmin, y=tmax)
colnames(d1)<-c("tmin", "tmax")
d1
d1$surv.egg<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "egg")
#install.packages("lattice")
library(lattice)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Jay")
d1$surv.adult<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "adult")
adult.surv<-levelplot(surv.adult~tmin*tmax, data=d1, main="Adult survival Magori")
#install.packages("gridExtra")
require(gridExtra) # also loads grid
grid.arrange(egg.surv,adult.surv, ncol=2)
###Mordecai fit for adult survival
###adult survival	from mordecai
par(mfrow=c(1,1))
tmin<-seq(-20,30,1)
tmax<-seq(-20,50,1)
d1<- expand.grid(x=tmin, y=tmax)
colnames(d1)<-c("tmin", "tmax")
d1
d1$surv.egg<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "egg")
#install.packages("lattice")
library(lattice)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Jay")
d1$surv.adult<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "adult")
adult.surv<-levelplot(surv.adult~tmin*tmax, data=d1, main="Adult survival Magori")
#install.packages("gridExtra")
require(gridExtra) # also loads grid
grid.arrange(egg.surv,adult.surv, ncol=2)
d1
source("/Users/marisa/Desktop/Climate_Suitability/Reproductive_rates/rates_aegypti.r")
View(d1)
d1<-d1[which(d1$tmax>d1$tmin)]
d1<-d1[which(d1$tmax>d1$tmin),]
d1
View(d1)
d1$surv.egg<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "egg")
#install.packages("lattice")
library(lattice)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Jay")
d1$surv.adult<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "adult")
adult.surv<-levelplot(surv.adult~tmin*tmax, data=d1, main="Adult survival Magori")
#install.packages("gridExtra")
require(gridExtra) # also loads grid
grid.arrange(egg.surv,adult.surv, ncol=2)
abline(a=-6)
abline(h=-6)
grid.arrange(egg.surv,adult.surv, ncol=2)
abline(h=-6)
grid.arrange(egg.surv,adult.surv, ncol=2)
#install.packages("lattice")
library(lattice)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Jay")
d1$surv.adult<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "adult")
adult.surv<-levelplot(surv.adult~tmin*tmax, data=d1, main="Adult survival Magori")
#install.packages("gridExtra")
require(gridExtra) # also loads grid
grid.arrange(egg.surv,adult.surv, ncol=2)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Jay")
surv.skeeter = function(tmin,tmax,lifestage){
######Convert this to a function of minimum and maximum tmean###
###using r_tmax and r_tmin
##from skeeter buster
###Changed 30 to 33 for T2 eggs from Jay's paper
if (substring(lifestage,1,1) == 'e') {T0 = -14; T1 = -6; T2 = 33; T3 = 48; surv.nominal = .99} #T3 originally 47
if (substring(lifestage,1,1) == 'i') {T0 = 5; T1 = 10; T2 = 39; T3 = 48; surv.nominal = .99} # T3 originally 44
if (substring(lifestage,1,1) == 'a') {T0 = 0; T1 = 4; T2 = 40; T3 = 55; surv.nominal = .82} # for females # 0,4,40,50,.89 in paper
Stmin = ifelse(tmin<=T0, 0.05,  ifelse(T0<tmin & tmin<T1,0.05+0.95*(tmin-T0)/(T1-T0), 1.0))
Stmax = ifelse(tmax>=T3, 0.05,  ifelse(T2<tmax & tmax<T3,1 - 0.95*(tmax-T2)/(T3-T2) , 1.0))
St <- Stmin*Stmax
egg.surv.daily <- surv.nominal*St
return(egg.surv.daily)
}
tmin<-seq(-20,30,1)
tmax<-seq(-20,50,1)
d1<- expand.grid(x=tmin, y=tmax)
colnames(d1)<-c("tmin", "tmax")
d1
d1<-d1[which(d1$tmax>d1$tmin),]
d1
d1$surv.egg<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "egg")
#install.packages("lattice")
library(lattice)
egg.surv<-levelplot(surv.egg~tmin*tmax, data=d1, main="Egg survival Jay")
d1$surv.adult<-surv.skeeter(d1$tmin, d1$tmax, lifestage = "adult")
adult.surv<-levelplot(surv.adult~tmin*tmax, data=d1, main="Adult survival Magori")
#install.packages("gridExtra")
require(gridExtra) # also loads grid
grid.arrange(egg.surv,adult.surv, ncol=2)
x= 10
c(2.2, 4, TRUE, x)
class(x)
vector("list", 10)
l<-vector("list", 10)
mylist = list(list())
rep(c(0,10,30), c(5,7,13))
table(sapply(mtcars, class))
lapply(mtcars[saaoky(mtcars, is.numeric)],max)
lapply(mtcars[sapply(mtcars, is.numeric)],max)
sapply(mtcars, is.numeric)
w=sapply(mtcars, is.numeric)
mtcars$danielle= "abc"
lapply(mtcars[sapply(mtcars, is.numeric)],max)
##This subsets the mtcars to all the vars that are numeric and takes the max of it
sapply(mtcars, is.numeric)
w=sapply(mtcars, is.numeric)
tmp= mtcars[w]
dim(tmp)
lapply(tmp, max)
sapply(mtcars, range)
sapply(mtcars[-12], range)
str(sapply(mtcars[-12], range))
colors= c("red", "green", "blue")
f3=factor(c("A","A","B","C","C","C","B" ))
colors[f3]
colors[-3][f3]
tmin<-seq(-20,30,1)
tmax<-seq(-20,50,1)
d1<- expand.grid(x=tmin, y=tmax)
View(d1)
m= matrix(rnorm(15),5,3)
m>0
which(m>0)
a=m>0
a
cbind(row(a)[a],col(a)[a])
mtcars<-mtcars
View(mtcars)
lapply(split(mtcars$mps, mtcars$am), median)
lapply(split(mtcars$mpg, mtcars$am), median)
sapply(split(mtcars$mpg, mtcars$am), median)
tapply(mtcars$mpg, mtcars$am, median)
tapply(mtcars, list(mtcars$cyl, mtcars$am),nrow)
library(dplyr)
library(nycflights13)
require(nycflights13)
require(googleVis)
install.packages(nycflights13)
install.packages('nycflights13')
require('googleVis')
install.packages('googleVis')
library(nycflights13)
library(googleVis)
dat <- flights %>%
select(origin, dest) %>%
filter(origin == "EWR" | origin == "JFK") %>%
group_by(origin, dest) %>%
summarise(
count = n()
)
Sankey <- gvisSankey(dat, from = "origin", to = "dest", weight = "count",
options=list(width=1000, height=2000))
plot(Sankey)
install.packages(c("curl", "httr"))
library(maptools)
oh <- readShapePoly("~/Google Drive/GIS/tiger_files/tl_2012_06_bg.shp") # this is the 2016 block group file, which you can download from https://www.census.gov/geo/maps-data/data/tiger-line.html
#install.packages("ggmap")
library(ggmap)
g1 = geocode('12545 Florence Ave, Santa Fe Springs, CA 90670',output='more')
pt <- data.frame(Longitude = g1$lon, Latitude = g1$lat)
pt <- data.frame(Longitude = g1$lon, Latitude = g1$lat)
g1 = geocode('12545 Florence Ave, Santa Fe Springs, CA 90670',output='more')
pt <- data.frame(Longitude = g1$lon, Latitude = g1$lat)
library(maptools)
library(ggmap)
pt <- data.frame(Longitude = g1$lon, Latitude = g1$lat)
shiny::runApp('Google Drive/PhD/RStudioScripts/app_R')
runApp('Google Drive/PhD/RStudioScripts/app_R')
runApp('Google Drive/PhD/RStudioScripts/app_R')
shiny::runApp('Google Drive/PhD/RStudioScripts/RR_shiny_app')
runApp('Google Drive/PhD/RStudioScripts/first_shiny_app')
install.packages("knitr")
install.packages("knitr")
setwd("~/Google Drive/PhD/GradSchoolGeneral_courses/Courses/GEO_200/Lab_1")
install.packages("tinytex")
df.imp<-readRDS("imputation_dataframe.RDS")
df.imp<-readRDS("imputation_dataframe.RDS")
df.imp<-readRDS("imputation_dataframe.RDS")
################################################################################
# PREPARE THE DATA
################################################################################
setwd('~/Desktop/GitHub/LA_analysis/CDPH_heat_project/')
################################################################################
# PREPARE THE DATA
################################################################################
setwd('~/Desktop/GitHub/LA_analysis/CDPH_heat_proj/')
# LOAD THE PACKAGES
library(dlnm) ; library(mvmeta) ; library(splines) ; library(tsModel)
# CHECK VERSION OF THE PACKAGE
if(packageVersion("dlnm")<"2.2.0")
stop("update dlnm package to version >= 2.2.0")
# LOAD THE DATASET (INCLUDING THE 10 UK REGIONS ONLY)
regEngWales <- read.csv("regEngWales.csv",row.names=1)
# LOAD THE DATASET (INCLUDING THE 10 UK REGIONS ONLY)
regEngWales <- read.csv("regEngWales.csv",row.names=1)
################################################################################
# PREPARE THE DATA
################################################################################
setwd('~/Desktop/GitHub/CDPH_heat_project/')
# LOAD THE DATASET (INCLUDING THE 10 UK REGIONS ONLY)
regEngWales <- read.csv("regEngWales.csv",row.names=1)
regEngWales$date <- as.Date(regEngWales$date)
View(regEngWales)
regEngWales$date <- as.Date(as.character(regEngWales$date))
as.character(regEngWales$date)
# LOAD THE DATASET (INCLUDING THE 10 UK REGIONS ONLY)
regEngWales <- read.csv("regEngWales.csv",row.names=1)
regEngWales$date <- as.Date(as.character(regEngWales$date),)
View(regEngWales)
regEngWales$date <- as.Date(regEngWales$date)
# LOAD THE DATASET (INCLUDING THE 10 UK REGIONS ONLY)
regEngWales <- read.csv("regEngWales.csv",row.names=1)
regEngWales$date <- as.Date(regEngWales$date)
View(regEngWales)
