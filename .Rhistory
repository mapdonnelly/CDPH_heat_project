"F_10 to 14 years",
"F_15 to 17 years",
"F_18 and 19 years",
"F_20 years",
"F_21 years",
"F_22 to 24 years",
"F_25 to 29 years",
"F_30 to 34 years",
"F_35 to 39 years",
"F_40 to 44 years",
"F_45 to 49 years",
"F_50 to 54 years",
"F_55 to 59 years",
"F_60 and 61 years",
"F_62 to 64 years",
"F_65 and 66 years",
"F_67 to 69 years",
"F_70 to 74 years",
"F_75 to 79 years",
"F_80 to 84 years",
"F_85 years and over",
"state",
"county",
"tract"
)
#ACSpop <- ACSpop %>% gather(2:47,key = variable, value = value)
#ACSpop$gender <-  matrix(unlist(strsplit(as.character(ACSpop$variable), "_")), ncol = 2, byrow =T)[, 1]
#ACSpop$acsAge <-  matrix(unlist(strsplit(as.character(ACSpop$variable), "_")), ncol = 2, byrow =T)[, 2]
# ITHIMageKey <-
#   c(
#     "ageClass1",
#     "ageClass2",
#     "ageClass2",
#     "ageClass3",
#     "ageClass3",
#     "ageClass3",
#     "ageClass3",
#     "ageClass3",
#     "ageClass3",
#     "ageClass4",
#     "ageClass4",
#     "ageClass4",
#     "ageClass5",
#     "ageClass5",
#     "ageClass5",
#     "ageClass6",
#     "ageClass6",
#     "ageClass6",
#     "ageClass6",
#     "ageClass7",
#     "ageClass7",
#     "ageClass8",
#     "ageClass8"
#   )
#
# names(ITHIMageKey) <- unique(ACSpop$acsAge)
# ACSpop$ITHIMage <- ITHIMageKey[as.character(ACSpop$acsAge)]
return(ACSpop)
}
counties<-unique(xwalk$COUNTY)
agelist<-list()
i<-5
agelist[[i]]<-getTractAgeSex(state = 06,county = counties[i])
age_df_long = do.call(rbind, agelist)
View(age_df_long)
counties<-unique(xwalk$COUNTY)
agelist<-list()
for (i in 1:length(counties)) {
agelist[[i]]<-getTractAgeSex(state = 06,county = counties[i])
}
age_df = do.call(rbind, agelist)
getTractMedInc <- function(state, county) {
varString <-"B19013_001E"
# https://api.census.gov/data/2015/acs5?get=NAME,B01001_001E&for=county:013&in=state:02
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"median_household_income",
"state",
"county",
"tract"
)
#ACSpop <- ACSpop %>% gather(2:5,key = variable, value = value)
return(ACSpop)
}
counties<-unique(xwalk$COUNTY)
med_inc_list<-list()
for (i in 1:length(counties)) {
med_inc_list[[i]]<-getTractMedInc(state = 06,county = counties[i])
}
med_inc_df = do.call(rbind, med_inc_list)
View(med_inc_df)
View(age_df)
###############
###Race
##############
state = 06
county = 01
varString <-"B02001_001E, B02001_002E, B02001_003E, B02001_004E, B02001_005E, B02001_006E, B02001_007E, B02001_008E, B02001_009E, B02001_010E"
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
varString <-"B02001_001E"
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
varString <-"B02001_001E,B02001_002E,B02001_003E,B02001_004E,B02001_005E,B02001_006E,B02001_007E,B02001_008E,B02001_009E,B02001_010E"
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"race_total",
"white_alone",
"black_af_am_alone",
"am_ind_alone",
"asian_alone",
"nat_haw_pac_isl",
"some_other_alone",
"two_or_more_races",
"two_or_more_races_incl_other",
"two_or_more_races_excl_other",
"state",
"county",
"tract"
)
return(ACSpop)
View(ACSpop)
getTractRace <- function(state, county) {
varString <-"B02001_001E,B02001_002E,B02001_003E,B02001_004E,B02001_005E,B02001_006E,B02001_007E,B02001_008E,B02001_009E,B02001_010E"
# https://api.census.gov/data/2015/acs5?get=NAME,B01001_001E&for=county:013&in=state:02
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"race_total",
"white_alone",
"black_af_am_alone",
"am_ind_alone",
"asian_alone",
"nat_haw_pac_isl",
"some_other_alone",
"two_or_more_races",
"two_or_more_races_incl_other",
"two_or_more_races_excl_other",
"state",
"county",
"tract"
)
#ACSpop <- ACSpop %>% gather(2:5,key = variable, value = value)
return(ACSpop)
}
counties<-unique(xwalk$COUNTY)
race_list<-list()
race_list<-list()
for (i in 1:length(counties)) {
race_list[[i]]<-getTractRace(state = 06,county = counties[i])
}
race_df = do.call(rbind, race_list)
View(race_df)
###############
###Hispanic origin
##############
state = 06
county = 01
varString <-"B03002_001E,B03002_002E,B03002_003E,B03002_004E,B03002_005E,B03002_006E,B03002_007E,B03002_008E,B03002_009E,B03002_010E,B03002_011E,B03002_012E,B03002_013E,B03002_014E,B03002_015E,B03002_016E,B03002_017E,B03002_018E,B03002_019E,B03002_020E,B03002_021E"
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"hisp_lat_race_total",
"not_hisp_lat_total",
"not_hisp_lat_white_alone",
"not_hisp_lat_black_af_am_alone",
"not_hisp_lat_am_ind_alone",
"not_hisp_lat_asian_alone",
"not_hisp_lat_nat_haw_pac_isl_alone",
"not_hisp_lat_some_other_alone",
"not_hisp_lat_two_or_more",
"not_hisp_lat_two_or_more_incl_some_other",
"not_hisp_lat_two_or_more_excl_some_other",
"yes_hisp_lat_total",
"yes_hisp_lat_white_alone",
"yes_hisp_lat_black_af_am_alone",
"yes_hisp_lat_am_ind_alone",
"yes_hisp_lat_asian_alone",
"yes_hisp_lat_nat_haw_pac_isl_alone",
"yes_hisp_lat_some_other_alone",
"yes_hisp_lat_two_or_more",
"yes_hisp_lat_two_or_more_incl_some_other",
"yes_hisp_lat_two_or_more_excl_some_other",
"state",
"county",
"tract"
)
View(ACSpop)
counties<-unique(xwalk$COUNTY)
hisp_lat_race_list<-list()
for (i in 1:length(counties)) {
hisp_lat_race_list[[i]]<-getTractHispLatRace(state = 06,county = counties[i])
}
getTractHispLatRace <- function(state, county) {
varString <-"B03002_001E,B03002_002E,B03002_003E,B03002_004E,B03002_005E,B03002_006E,B03002_007E,B03002_008E,B03002_009E,B03002_010E,B03002_011E,B03002_012E,B03002_013E,B03002_014E,B03002_015E,B03002_016E,B03002_017E,B03002_018E,B03002_019E,B03002_020E,B03002_021E"
# https://api.census.gov/data/2015/acs5?get=NAME,B01001_001E&for=county:013&in=state:02
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"hisp_lat_race_total",
"not_hisp_lat_total",
"not_hisp_lat_white_alone",
"not_hisp_lat_black_af_am_alone",
"not_hisp_lat_am_ind_alone",
"not_hisp_lat_asian_alone",
"not_hisp_lat_nat_haw_pac_isl_alone",
"not_hisp_lat_some_other_alone",
"not_hisp_lat_two_or_more",
"not_hisp_lat_two_or_more_incl_some_other",
"not_hisp_lat_two_or_more_excl_some_other",
"yes_hisp_lat_total",
"yes_hisp_lat_white_alone",
"yes_hisp_lat_black_af_am_alone",
"yes_hisp_lat_am_ind_alone",
"yes_hisp_lat_asian_alone",
"yes_hisp_lat_nat_haw_pac_isl_alone",
"yes_hisp_lat_some_other_alone",
"yes_hisp_lat_two_or_more",
"yes_hisp_lat_two_or_more_incl_some_other",
"yes_hisp_lat_two_or_more_excl_some_other",
"state",
"county",
"tract"
)
#ACSpop <- ACSpop %>% gather(2:5,key = variable, value = value)
return(ACSpop)
}
counties<-unique(xwalk$COUNTY)
hisp_lat_race_list<-list()
for (i in 1:length(counties)) {
hisp_lat_race_list[[i]]<-getTractHispLatRace(state = 06,county = counties[i])
}
hisp_lat_race_df = do.call(rbind, hisp_lat_race_list)
View(hisp_lat_race_df)
###############
###Pop density
##############
state = 06
county = 01
varString <-"B01003_001E"
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"population_density",
"state",
"county",
"tract"
)
return(ACSpop)
getTractPopDens <- function(state, county) {
varString <-"B01003_001E"
# https://api.census.gov/data/2015/acs5?get=NAME,B01001_001E&for=county:013&in=state:02
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"population_density",
"state",
"county",
"tract"
)
#ACSpop <- ACSpop %>% gather(2:5,key = variable, value = value)
return(ACSpop)
}
counties<-unique(xwalk$COUNTY)
pop_dens_list<-list()
for (i in 1:length(counties)) {
pop_dens_list[[i]]<-getTractPopDens(state = 06,county = counties[i])
}
pop_dens_df = do.call(rbind, pop_dens_list)
View(pop_dens_df)
getTractPopDens <- function(state, county) {
varString <-"B09020_001E,B09020_002E,B09020_003E,B09020_014E,B09020_015E,B09020_016E,B09020_017E,B09020_018E,B09020_019E,B09020_021E"
# https://api.census.gov/data/2015/acs5?get=NAME,B01001_001E&for=county:013&in=state:02
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"household_type_over_65_total",
"household_type_over_65_in_households",
"household_type_over_65_in_households_family",
"M_65_in_households_nonfamily_householder_total",
"M_65_in_households_nonfamily_householder_alone",
"M_65_in_households_nonfamily_householder_not_alone",
"F_65_in_households_nonfamily_householder_total",
"F_65_in_households_nonfamily_householder_alone",
"F_65_in_households_nonfamily_householder_not_alone",
"over_65_group_quarters",
"state",
"county",
"tract"
)
#ACSpop <- ACSpop %>% gather(2:5,key = variable, value = value)
return(ACSpop)
}
counties<-unique(xwalk$COUNTY)
getTractHouseholdType65 <- function(state, county) {
varString <-"B09020_001E,B09020_002E,B09020_003E,B09020_014E,B09020_015E,B09020_016E,B09020_017E,B09020_018E,B09020_019E,B09020_021E"
# https://api.census.gov/data/2015/acs5?get=NAME,B01001_001E&for=county:013&in=state:02
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"household_type_over_65_total",
"household_type_over_65_in_households",
"household_type_over_65_in_households_family",
"M_65_in_households_nonfamily_householder_total",
"M_65_in_households_nonfamily_householder_alone",
"M_65_in_households_nonfamily_householder_not_alone",
"F_65_in_households_nonfamily_householder_total",
"F_65_in_households_nonfamily_householder_alone",
"F_65_in_households_nonfamily_householder_not_alone",
"over_65_group_quarters",
"state",
"county",
"tract"
)
#ACSpop <- ACSpop %>% gather(2:5,key = variable, value = value)
return(ACSpop)
}
###############
###Household type including living alone pop >65
##############
state = 06
county = 01
varString <-"B09020_001E,B09020_002E,B09020_003E,B09020_014E,B09020_015E,B09020_016E,B09020_017E,B09020_018E,B09020_019E,B09020_021E"
ACSpop <-
as.data.frame(fromJSON(
paste(
"https://api.census.gov/data/2015/acs5?get=NAME,",
varString,
"&for=tract:*&in=state:",
state,
"+county:",
county,
"&key=f78d6b6c18608edc379b5a06c55407ceb45e7038",
sep = ""
)
))
ACSpop <- ACSpop[-1,]
colnames(ACSpop) <-
c(
"name",
"household_type_over_65_total",
"household_type_over_65_in_households",
"household_type_over_65_in_households_family",
"M_65_in_households_nonfamily_householder_total",
"M_65_in_households_nonfamily_householder_alone",
"M_65_in_households_nonfamily_householder_not_alone",
"F_65_in_households_nonfamily_householder_total",
"F_65_in_households_nonfamily_householder_alone",
"F_65_in_households_nonfamily_householder_not_alone",
"over_65_group_quarters",
"state",
"county",
"tract"
)
View(ACSpop)
counties<-unique(xwalk$COUNTY)
house_type_65_list<-list()
for (i in 1:length(counties)) {
house_type_65_list[[i]]<-getTractHouseholdType65(state = 06,county = counties[i])
}
house_type_65_df = do.call(rbind, house_type_65_list)
View(house_type_65_df)
